import java.io.*;
import java.util.*;

class Knapsack 
{ 
    // Returns the maximum value that can be put in a knapsack of capacity W 
    static int knapSack(int W, int wt[], int val[], int n , int k[][]) 
    { 
        if(n==0 || W==0)
            return 0;
        
        if(k[n][W]!=-1)
            return k[n][W];
            
        if( wt[n-1]<=W){
            return k[n][W]= Math.max(val[n-1]+ knapSack(W-wt[n-1],wt,val,n-1,k), knapSack(W,wt,val,n-1,k));
        }
        else
            return k[n][W]= knapSack(W,wt,val,n-1,k);
    } 
    
    public static void main(String args[]){
        int values[]={1,2,3};
        int weight[]={4,5,1};
        int N=3;
        int W=4;
        int k[][]=new int[N+1][W+1];
        for(int row[]: k){
             Arrays.fill(row,-1);
        }
        System.out.println(knapSack(W,weight,values,N,k));
    }
}
